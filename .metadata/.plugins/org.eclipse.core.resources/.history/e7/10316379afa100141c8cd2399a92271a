package topic1;

import java.util.ArrayList;

public class ShoppingCart implements ShoppingCartVisitor {

	private ArrayList<Product> productsList;

	private double totalCost;
	private double totalWithDiscount;
	private static int transactionNumber;

	public static int getTransactionNumber() {
		return transactionNumber;
	}

	public static void setTransactionNumber(int transactionNumber) {
		ShoppingCart.transactionNumber = transactionNumber;
	}

	public ShoppingCart() {
		productsList = new ArrayList<Product>();
		setTotalCost(0);
		setTotalWithDiscount(0);

	}

	public double getTotalWithDiscount() {
		return totalWithDiscount;
	}

	public void setTotalWithDiscount(double totalWithDiscount) {
		this.totalWithDiscount = totalWithDiscount;
	}

	public ArrayList<Product> getProductsList() {
		return productsList;
	}

	public void setProductsList(ArrayList<Product> productsList) {
		this.productsList = productsList;
	}

	public double getTotalCost() {
		return totalCost;
	}

	public void setTotalCost(double totalCost) {
		this.totalCost = totalCost;
	}

	@Override
	public void visit(Item item) {
		productsList.add(item);
		System.out.println("Item name: " + item.getItemName() + " $" + item.getItemPrice());
		totalCost += item.getItemPrice();
	}

	@Override
	public void visit(ArrayList<Product> productsList) {
		for (Product prod : productsList) {
			prod.accept(this);
		}
		System.out.println("Total Cost: $" + totalCost);
	}
	
	@Override
	public void visit(Offer offer) {
		productsList.add(offer);
		System.out.println("Offer name: " + offer.getName() + " $" + offer.getPrice());
	}

	// Payment methods

	// Credit Card
	@Override
	public String buy(String costumerName, int creditCardNumber) {

		totalWithDiscount = totalCost * (0.9);
		transactionNumber++;
		return "Paid " + totalWithDiscount + " with Credit Card" + " --Transaction Number: " + transactionNumber;
	}

	// PayPal
	@Override
	public String buy(String email) {
		Item i = null;
		double cheapestPrice = 0;

		i = (Item) productsList.get(0);
		cheapestPrice = i.getItemPrice();

		for (Product prod : productsList) {
			i = (Item) prod;
			if (i.getItemPrice() < cheapestPrice)
				cheapestPrice = i.getItemPrice();
		}
		totalWithDiscount = totalCost - cheapestPrice;
		transactionNumber++;

		return "Paid " + totalWithDiscount + " using Paypal" + " --Transaction Number: " + transactionNumber;
	}

	// Cash
	@Override
	public String buy() {
		Item i = null;
		double expensivePrice = 0;

		i = (Item) productsList.get(0);
		expensivePrice = i.getItemPrice();

		for (Product prod : productsList) {
			i = (Item) prod;
			if (i.getItemPrice() > expensivePrice)
				expensivePrice = i.getItemPrice();
		}

		expensivePrice = expensivePrice * (0.9);
		totalWithDiscount = totalCost - expensivePrice;
		transactionNumber++;

		return "Paid " + totalWithDiscount + " by cash" + " --Transaction Number: " + transactionNumber;
	}

}
