package topic1;

import interfaces.Observer;
import interfaces.Product;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class ShoppingCart implements ShoppingCartVisitor,Subject {

	private ArrayList<Product> productsList;

	private double totalCost;
	
	private double totalWithDiscount;
	
	private static int transactionNumber;
	
	private Set<Observer> shoppingCartObservers;

	public static int getTransactionNumber() {
		return transactionNumber;
	}

	public static void setTransactionNumber(int transactionNumber) {
		ShoppingCart.transactionNumber = transactionNumber;
	}

	public ShoppingCart() {
		shoppingCartObservers = new HashSet<Observer>();
		productsList = new ArrayList<Product>();
		totalCost=0;
		totalWithDiscount = 0;

	}
	
	
	
	public Set<Observer> getShoppingCartObservers() {
		return shoppingCartObservers;
	}

	public void setShoppingCartObservers(Set<Observer> shoppingCartObservers) {
		this.shoppingCartObservers = shoppingCartObservers;
	}

	public double getTotalWithDiscount() {
		return totalWithDiscount;
	}

	public void setTotalWithDiscount(double totalWithDiscount) {
		this.totalWithDiscount = totalWithDiscount;
	}

	public ArrayList<Product> getProductsList() {
		return productsList;
	}

	public void setProductsList(ArrayList<Product> productsList) {
		this.productsList = productsList;
	}

	public double getTotalCost() {
		return totalCost;
	}

	public void setTotalCost(double totalCost) {
		this.totalCost = totalCost;
	}

	
	//ShoppingCartVisitor methods override
	@Override
	public void visit(Item item) {
		productsList.add(item);
		System.out.println("Item name: " + item.getName() + " $" + item.getPrice());
		totalCost += item.getPrice();
	}

	@Override
	public void visit(ArrayList<Product> productsList) {
		for (Product prod : productsList) {
			prod.accept(this);
		}
		System.out.println("Total Cost: $" + totalCost);
	}
	
	@Override
	public void visit(Offer offer) {
		productsList.add(offer);
		System.out.println("Offer name: " + offer.getName() + " $" + offer.getPrice());
		totalCost += offer.getPrice();
	}
	
	// Subject methods override
	
	@Override
	public void addObserver(Observer shoppingCartObserver) {
		shoppingCartObservers.add(shoppingCartObserver);
	}

	@Override
	public void removeObserver(Observer shoppingCartObserver) {
		shoppingCartObservers.remove(shoppingCartObserver);
		
	}

	@Override
	public void doNotify() {
		Iterator<Observer> iterator = shoppingCartObservers.iterator();
		while(iterator.hasNext()){
			Observer shoppingCartObserver = iterator.next();
			shoppingCartObserver.doUpdate(transactionNumber);
		}
	}
	
	@Override
	public void doNotify(double priceChange){
		
	}
	
	@Override
	public void doNotify(Product product){
		
	}

	
	
	
	
	// Payment methods

	// Credit Card
	@Override
	public String buy(String costumerName, int creditCardNumber) {

		totalWithDiscount = totalCost * (0.9);
		transactionNumber++;
		doNotify();
		return "Paid " + totalWithDiscount + " with Credit Card" + " --Transaction Number: " + transactionNumber;
	}


	// PayPal
	@Override
	public String buy(String email) {
		Product p = null;
		double cheapestPrice = 0;

		p =  productsList.get(0);
		cheapestPrice = p.getPrice();

		for (Product prod : productsList) {
			if (prod.getPrice() < cheapestPrice)
				cheapestPrice = p.getPrice();
		}
		totalWithDiscount = totalCost - cheapestPrice;
		transactionNumber++;
		doNotify();

		return "Paid " + totalWithDiscount + " using Paypal" + " --Transaction Number: " + transactionNumber;
	}

	// Cash
	@Override
	public String buy() {
		Product p = null;
		double expensivePrice = 0;

		p = productsList.get(0);
		expensivePrice = p.getPrice();

		for (Product prod : productsList) {
			if (prod.getPrice() > expensivePrice)
				expensivePrice = prod.getPrice();
		}

		expensivePrice = expensivePrice * (0.9);
		totalWithDiscount = totalCost - expensivePrice;
		transactionNumber++;
		doNotify();

		return "Paid " + totalWithDiscount + " by cash" + " --Transaction Number: " + transactionNumber;
	}

}
